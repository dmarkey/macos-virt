network:
  ethernets:
    enp0s1:
      dhcp4: true
  renderer: networkd
  version: 2
bootcmd:
  - [rm, /etc/kernel/postinst.d/xx-update-initrd-links]
  - [sh, -c, " rm /usr/sbin/flash-kernel || true"]
  - [ln, -s, /bin/true, /usr/sbin/flash-kernel]
apt_sources:
 - source: "ppa:canonical-server/server-backports"
ntp:
  enabled: true
package_update: true
package_upgrade: true
packages:
  - python3-psutil
  - docker.io
  - qemu
  - binfmt-support
  - qemu-user-static

runcmd:
  - - systemctl
    - daemon-reload
  - - systemctl
    - enable
    - macos-virt-service.service
    - --now
  - - sh
    - /usr/sbin/install_boot.sh
  - [sh, -c, "apt-mark hold flash-kernel || true"]
  - [apt, remove, -y, multipath-tools, irqbalance]
  - [ systemctl, restart, docker ]
  - [ bash, /root/k3s-init.sh ]
users:
  - default
  - gecos: None
    groups:
      - adm
      - audio
      - cdrom
      - dialout
      - dip
      - floppy
      - lxd
      - netdev
      - plugdev
      - sudo
      - video
    lock_passwd: false
    name: None
    plain_text_passwd: password
    shell: /bin/bash
    ssh-authorized-keys:
      - None
    sudo:
      - ALL=(ALL) NOPASSWD:ALL
write_files:
  - content: |
      #!/bin/sh
      curl -sfL https://get.k3s.io | sudo INSTALL_K3S_VERSION=v1.23.3+k3s1 INSTALL_K3S_EXEC="--write-kubeconfig-mode 644 --docker" sh -

    path: /root/k3s-init.sh
  - content: |
      [Service]
      ExecStart=
      ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2376
    path: /etc/systemd/system/docker.service.d/override.conf
  - content: |
      import serial
      import subprocess
      import json
      import psutil
      import os
      import time

      ser = serial.Serial("/dev/hvc1")


      def send_json_message(message):
          dumped = json.dumps(message)
          ser.write((dumped + "\r\n").encode())


      def send_status():
          for x in range(0,5):
              output = {'cpu_count': psutil.cpu_count(),
                      'cpu_usage': psutil.cpu_percent(),
                      'status': 'running',
                      'root_fs_usage': psutil.disk_usage("/").percent,
                      'network_addresses': [[x.address, x.netmask] for x in
                                            psutil.net_if_addrs()['enp0s1'] if
                                            x.family.name == "AF_INET"],
                      'memory_usage': psutil.virtual_memory().percent}
              if output['network_addresses']:
                  break
              time.sleep(5)
            
          send_json_message(output)


      send_json_message({"status": "initializing"})

      try:
          subprocess.check_output(args=["cloud-init", "status", "--wait"])
          send_json_message({"status": "initialization_complete"})
      except subprocess.CalledProcessError:
          send_json_message({"status": "initialization_error"})

      send_status()

      while True:
          incoming = ser.readline()
          command_parsed = json.loads(incoming)
          if command_parsed['message_type'] == "poweroff":
              print("Powering off")
              os.system('poweroff')
          if command_parsed['message_type'] == "time_update":
              print("Updating the time")
              os.system(f'date +%s -s @{command_parsed["time"]}')
          if command_parsed['message_type'] == "status":
              print("Sending status")
              send_status()

    path: /usr/sbin/macos-virt-service.py
  - content: '[Unit]

    Description=Macos-Virt Agent.

    [Service]

    ExecStart=/bin/python3 -u /usr/sbin/macos-virt-service.py

    [Install]

    WantedBy=multi-user.target'
    path: /etc/systemd/system/macos-virt-service.service
  - content: '#!/bin/sh -e

    mkfs.vfat -n boot -I /dev/vdb

    mkdir /tmp/boot

    mount /dev/vdb /tmp/boot

    cp -var /boot/* /tmp/boot || true

    umount /tmp/boot

    echo "LABEL=boot      /boot    vfat   defaults        0 1" >> /etc/fstab

    mount -a

    '
    path: /usr/sbin/install_boot.sh